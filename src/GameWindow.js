import React, { useContext } from "react";
import Wheel from "./Wheel.js";
import { RouletteContext } from "./RouletteProvider";

/**
 * The component appears if the user confirms to play a game.
 * Here the user tries to guess the number, and checks his current attempt number and the amount of total prize.
 */
export default function GameWindow() {
  const { changeUserNumber, moveStep, totalPrize, currentAttemptNumber, maxAttemptNumber, resetGuessNumber, stopWheel, generateGuessNumber, userNumber, setTotalPrize, openWinWindow, addAttemptNumber, resetTotalPrize, resetCycle, openEndWindow, runWheel, initialMaxPrize, degreeBase, cycleNumber, initialMaxRange, rangeAdd } = useContext(RouletteContext);

  /**
   * The function checks the number user enters with a random number generated by a program.
   * If the number is guessed, then the total prize changes and the 'win' window opens.
   * If a user doesn`t guess and there are no attempts to try, then the total prize resets, the number of cycles resets and the 'final' window opens.
   * If a user doesn`t guess but has more attempts to try, he can try to guess the number again.
   */
  const checkNumber = () => {
    resetGuessNumber();
    let nextRandomNumber = getRandomNumber();
  
    function getNumber() {
      stopWheel();
      generateGuessNumber(nextRandomNumber);
      if (nextRandomNumber === userNumber) {
        let currentPrize = getAttemptPrize();
        setTotalPrize(currentPrize + totalPrize);
        openWinWindow();
      } else {
        addAttemptNumber();
        if (currentAttemptNumber >= maxAttemptNumber - 1){
          resetTotalPrize();
          resetCycle();
          openEndWindow();
        }
      }
    }

    if (currentAttemptNumber < maxAttemptNumber) {
      runWheel();
      setTimeout(getNumber, 2000);
    } else {
      openEndWindow();
    }
  }

  /**
   * The function shows the max prize on a current attempt and current cycle. On each next cycle the max prize a user can win increases.
   */
  function getMaxPrize() {
    return initialMaxPrize * Math.pow(degreeBase, cycleNumber) / Math.pow(degreeBase, currentAttemptNumber);
  }

  /**
   * The function shows the max prize if the user still has any attempts to try.
   */
  function getAttemptPrize() {
    if (currentAttemptNumber >= maxAttemptNumber) {
      return 0;
    } else {
      return getMaxPrize(); 
    }
  }

  /**
   * The function sets the range - the variable is increased if the user proceeds to the next game cycle.
   */
  const getCurrentMaxRange = () => {
    return initialMaxRange + rangeAdd * cycleNumber;
  }
  
  /**
   * The function generates the random number in a range that is set in a 'range' variable.
   */
  function getRandomNumber() {
    return Math.floor(Math.random() * (getCurrentMaxRange() + 1));
  }

  return (
    <div id='roullete-game'>
      <div id='game-rules'>
        <div id='game-rules-intro'>
          <div> Choose a roulette pocket number from 0 to {getCurrentMaxRange()}</div>
          <div id="game-prize">Possible prize on current attempt: {getMaxPrize()}$</div>
        </div>
        <div id='text-field'>
          <div id='game-attempts'>Attempts left: {maxAttemptNumber - currentAttemptNumber}</div>
          <div>Total prize: {totalPrize}$</div>
        </div>
        <div id='input-field'>
          <input id="start-to-guess-input" onChange={(event) => changeUserNumber(parseInt(event.target.value))}></input>
          <br />
          <div className='buttons-field'>
            <button className='btn btn-outline-warning' onClick={() => moveStep(5)}>Cancel</button>
            <button className='btn btn-outline-success' id='send-number-button' onClick={() => checkNumber()}>Ok</button>
          </div>
        </div>
      </div>
  <Wheel />
</div>
  )
}
